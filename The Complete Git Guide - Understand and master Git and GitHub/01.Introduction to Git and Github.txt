SECTION - 1

INTRODUCTION TO GIT AND GITHUB 

Git was created by Linus Torvalds in 2005 as a version control system to manage the development of the Linux kernel. 
Torvalds had grown frustrated with the limitations of the existing version control systems and wanted to create a system that was faster,
 more efficient, and more flexible.

GitHub was created in 2008 by Tom Preston-Werner, Chris Wanstrath, and PJ Hyett as a web-based hosting service for Git repositories. 
The idea behind GitHub was to make it easier for developers to share and collaborate on code, 
and to provide a platform for open source software development.

Git is a distributed version control system.

- > It is called a distributed version control system because in this 
    we can work with multiple people on the same project.

- > Git is a distributed version control system that allows you to track changes to files in a project over time. 
    It was created in 2005 by Linus Torvalds, the creator of the Linux operating system, 
    and is widely used by software developers around the world.

- > Git works by creating a local repository on your computer that stores all of the files in your project 
    and their history. 
    You can then make changes to the files, 
    commit those changes to the repository, 
    and share your changes with other contributors by pushing them to a remote repository.


- > GitHub, on the other hand, is a web-based hosting service for Git repositories. 
    It was created in 2008 and has since become one of the most popular platforms for hosting 
    and collaborating on Git projects. With GitHub, you can create a remote repository for your project, 
    invite other contributors to collaborate on the project, and manage issues and pull requests.

- > GitHub also provides additional features such as code reviews, continuous integration, 
    and project management tools. It has become a popular platform for open-source software projects, 
    as it allows developers from around the world to contribute to a project and collaborate with each other.

    Git and GitHub work together to provide a powerful toolset for managing and collaborating on software projects.
    Git provides the underlying version control system, while GitHub provides a platform for hosting, sharing, 
    and collaborating on Git repositories.




Git can track changes in files in any folder called repository.

- > In Git, a repository is a collection of files and folders that are managed and tracked as a unit. 
    Git can track changes in files in any folder by using a version control system that records changes
    to the files over time.

- > When a new file is added to the repository or an existing file is modified,
    Git automatically detects the changes and records them as a new version of the file.
    This process is called "committing" the changes, 
    and it creates a new snapshot of the entire repository at that point in time.


- > Git also allows you to track changes made to specific files or folders within the repository. 
    By default, Git tracks all changes made to all files in the repository, 
    but you can use various Git commands to specify which files or folders you want to track or ignore.

- > Once you have committed changes to the repository, 
    Git keeps track of the entire history of changes made to each file. 
    This allows you to view and revert to previous versions of the file, 
    compare different versions of the file, and track who made changes to the file and when.



- > Under the hood, Git has its own "file strcuture" and every file is stored in a specific document, 
    and every file has a specific(unique) hash.

Git is simply persistent hash map that stores key-value pairs.

Key is hash of the file and value is content of the file.

- > When you create a new commit in Git, it creates a new key-value pair for each file 
    that has been modified in that commit. 
    The key for each pair is a unique hash of the file content, 
    which is calculated using a cryptographic hash function. 
    The hash is then used to store the file content in Git's object store, 
    where it can be accessed and retrieved later.


- > This approach has several advantages : 
    First, it ensures that the file content cannot be tampered with, 
    as any modification to the content will result in a different hash value.
    
    Second, it allows Git to efficiently store and retrieve large files and directories, 
    as it can easily detect duplicate content and only store it once.



- > In addition to the file content, Git also stores metadata about each commit, including the author, date, 
    commit message, and a pointer to the parent commit. 
    This metadata allows Git to reconstruct the entire history of the repository, 
    showing all changes made to each file over time.


Github is primarily used by distributed teams that work on
the same projects.

Git is a special file system that allows you to store changes in the computer.

- > Git could be used locally without internet and locally.
    This provides us with the full access to the files change history.
    Git stores all the data locally in the computer.
    Github maybe used just as a backup for all the local git repositories.

- > A GitHub repository, also known as a repo, is a storage space where you can store your project's code,
    documentation, and other related files. It is hosted on the GitHub platform, 
    which provides various features for managing and collaborating on code.

- > When you create a new repository on GitHub, you can choose to make it public or private. 
    Public repositories are visible to anyone, while private repositories can only be accessed by 
    collaborators that you have explicitly invited.

- > You can add files to your GitHub repository by uploading them directly to the web interface,
    or by using Git to push changes from your local repository to the remote repository on GitHub.
    You can also use GitHub's web interface to manage issues, pull requests, and other aspects of your project.

    GitHub repositories are widely used by developers around the world to collaborate on open-source projects, 
    share code samples, and manage private projects for their own organizations. 
    The platform provides powerful tools for managing code and collaborating with others, 
    making it a popular choice for software development projects of all sizes.




ADVANTAGES OF GIT

1. Distributed Version Control: Git is a distributed version control system, 
   which means that every developer has a complete copy of the codebase on their local machine. 
   This allows developers to work offline, makes branching and merging easier, 
   and provides a more robust backup system.

2.  Speed: Git is designed to be fast and efficient, even with very large repositories. 
    This is due in part to its use of a content-addressable filesystem,
    which allows Git to quickly locate and retrieve files based on their content.

3.  Branching and Merging: Git makes it easy to create branches and merge changes between them.
    This makes it easy to experiment with new features or bug fixes without affecting the main codebase, 
    and to keep different versions of the code in sync with each other.

4.  Collaboration: Git is designed to make collaboration between developers easy. 
    Multiple developers can work on the same codebase at the same time,
    and Git provides powerful tools for managing conflicts and merging changes.

5.  Open Source: Git is open source software, which means that anyone can use it, modify it, 
    and contribute to its development. This has led to a large and active community of developers who contribute to the development of Git itself, as well as to many related tools and projects.


DISADVANTAGES OF GIT

1.  Steep Learning Curve: Git has a steep learning curve, especially for developers who are new to version control systems.
    This can make it difficult for teams to adopt Git and may require additional training and support.

2.  Command Line Interface: Git's command line interface can be daunting for developers who are used to working with graphical user interfaces.
    Although there are many GUI clients available for Git, 
    they may not provide all of the functionality of the command line interface.

3.  Complexity: Git is a complex tool with many features and options. 
    Although this provides a great deal of flexibility, 
    it can also make Git more difficult to use and understand.

4.  Large Repository Sizes: Git stores a complete copy of the codebase on each developer's local machine, 
    which can lead to large repository sizes, especially for projects with many large files.

5.  Security: Git does not provide built-in security features, such as access controls or encryption. 
    These must be implemented separately, which can be time-consuming and complex.




ADVANTAGES OF GITHUB 

1.  Collaboration: GitHub is a powerful tool for collaboration and enables multiple developers to work on the same project simultaneously. 
    This makes it easier to work on larger projects and to distribute workloads.

2.  Community: GitHub has a large and active community of developers, which means that users can get help and support from other users.

3.  Integration: GitHub integrates with a wide range of other tools and services, 
    such as continuous integration and deployment tools, code editors, and project management tools.

4.  Open Source: GitHub is built on open source software, and many of the projects hosted on GitHub are also open source. 
    This means that anyone can access the code, modify it, and contribute to its development.

5.  Version Control: GitHub provides powerful version control tools that allow developers to track changes, 
    collaborate on code, and roll back changes when necessary.



DISADVANTAGES OF GITHUB

1.  Limited Privacy: GitHub is a public platform by default, which means that anyone can view and access public repositories. 
    Private repositories are available, but they come with a cost.

2.  Dependency on Internet: GitHub is a cloud-based service, which means that it requires an internet connection to access. 
    This can be a problem for developers who work in areas with poor internet connectivity.

3.  Security: While GitHub has several security features, it is not immune to security vulnerabilities. 
    Users need to be vigilant about their security practices, such as using strong passwords, 
    enabling two-factor authentication, and encrypting sensitive data.

4.  Limited Customization: GitHub has a limited range of customization options, 
    and users may not be able to customize the platform to meet their specific needs.

5.  Reliance on Third-Party Tools: While GitHub integrates with many tools and services,
    users may find themselves reliant on third-party tools to extend the functionality of GitHub. 
    This can add additional costs and complexity to using the platform.



















