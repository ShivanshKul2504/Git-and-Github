SECTION - 2

BASIC SHELL COMMANDS


mkdir Command 


- > It is used to create a directory.

    Example : 
    mkdir new_folder


The mkdir command is used in Unix-based systems to create a new directory or folder. The name "mkdir" stands for "make directory".

The syntax for using the mkdir command is as follows:

    mkdir [options] directory_name

Here, directory_name is the name of the directory you want to create. 
You can also specify additional options, such as -p to create parent directories if they don't already exist.

    For example, the following command will create a new directory called "my_folder" in the current directory:

        mkdir my_folder


If you want to create a directory and all of its parent directories if they don't already exist, you can use the -p option. 
    
    For example, the following command will create a new directory called "parent_folder" and a subdirectory called "child_folder" within it:

    mkdir -p parent_folder/child_folder


Note that the mkdir command can also be used to create multiple directories at once by specifying multiple directory names 
separated by spaces. 

For example:
    mkdir folder1 folder2 folder3

This will create three new directories called "folder1", "folder2", and "folder3" in the current directory.





ls Command

- > It is used to list all the files and directories in the current directory.

    Example : 

        Directory: C:\Users\Shivansh Kulshrestha\GithubFiles\Git and Github     


        Mode                 LastWriteTime         Length Name
        ----                 -------------         ------ ----
        d-----        30-03-2023     11:21                The Complete Git Guide -  
                                                        Understand and master Git 
                                                        and GitHub

    a ) ls - l
        - > It is used to list the files and directories in a tabular format.
        - > It provides us with date,name,permissions for each directory.
        
    b ) ls -la 
        - > It is used to see hidden folder and files.

The ls command is used in Unix-based systems to list the files and directories in a directory. The name "ls" stands for "list".

The syntax for using the ls command is as follows:

    ls [options] [directory]

Here, directory is the name of the directory you want to list files and directories from. 
If no directory is specified, the ls command will list the files and directories in the current directory.

You can also specify additional options to customize the output of the ls command. Some common options include:

    -l: List files and directories in long format, showing additional information such as file permissions, owner, size, and modification time.
    -a: List all files and directories, including hidden files and directories that start with a dot (.).
    -h: Show file sizes in a human-readable format, such as "1K" or "5M".

For example, the following command will list all files and directories in the current directory:

    ls


The following command will list all files and directories in the /home/user/documents directory in long format, 
showing additional information about each file and directory:

    ls -l /home/user/documents


The ls command can be combined with other commands, such as grep or sort, to filter or sort the output.
For example, the following command will list all files and directories in the current directory that contain the word "example":

    ls | grep example

Note that the ls command can also be used to list files and directories in a remote directory on a server, 
using the ssh command to connect to the server.


cd Command

- > It is used to change the directory.
    .. is used to switch to the parent directory.
    . It is the alias of the parent directory.

To move up one directory level, you can use the .. notation. 

For example, if you are currently in the /home/user/documents/reports directory, 
and you want to move up to the documents directory, you can type the following command:

    cd ..

The cd command is a fundamental command in the command-line interface and is used frequently when navigating through the file system.



pwd Command

- > It is used to find the path to the current working directory.
    
    Example : 
        pwd
        result : - C:\Users\Shivansh Kulshrestha\GithubFiles\Git and Github




Clear Command

- > It is used to clear the terminal.




SHELL COMMANDS (FILE MANAGEMENT)


touch Command 
- > It is used to create a new file.


    Example : 
    touch new-file.txt

The touch command is a command-line tool used to create new empty files or update the modification and access times of existing files. The touch command is available on Unix-based systems, including Linux and macOS, as well as Windows operating systems that have the Windows Subsystem for Linux (WSL) installed.

The syntax for using the touch command is as follows:

touch [options] [filename(s)]

Here, options are any command-line options that modify the behavior of the touch command, and filename(s) are one or more filenames that you want to create or modify. If the file already exists, touch will update the modification and access times of the file. If the file does not exist, touch will create an empty file with the specified filename.

Some common options for the touch command include:

-a: Only update the access time of the file, not the modification time.
-c: Do not create a new file if the file does not exist.
-d: Use a specific date and time instead of the current time.
-r: Use the modification and access times of an existing file instead of the current time.

For example, to create a new file called myfile.txt in the current directory, you can use the following command:

touch myfile.txt

To update the modification time of an existing file called mydata.csv, you can use the following command:

touch mydata.csv

Overall, the touch command is a simple but useful tool for creating new files or updating the timestamps of existing files in a command-line environment.






cat Command

- > List the contents of the file.

    Example : 
    cat another-file.txt

- > The cat command is a command-line tool used to display the contents of a file on the terminal. 
    The cat command is available on Unix-based systems, including Linux and macOS, 
    as well as Windows operating systems that have the Windows Subsystem for Linux (WSL) installed.

The syntax for using the cat command is as follows:

    cat [options] [filename(s)]

Here, options are any command-line options that modify the behavior of the cat command, 
and filename(s) are one or more filenames that you want to display the contents of. 
If multiple filenames are provided, cat will display the contents of each file in sequence.

Some common options for the cat command include:

    -n: Display line numbers alongside each line of the file.
    -b: Display line numbers for non-blank lines only.
    -s: Squeeze consecutive empty lines into a single empty line.
    -E: Display a $ character at the end of each line to indicate the end of the line.
    
For example, to display the contents of a file called myfile.txt on the terminal, you can use the following command:
    cat myfile.txt

To display the contents of multiple files, you can provide their filenames as arguments:
    cat file1.txt file2.txt file3.txt

Overall, the cat command is a simple but useful tool for displaying the contents of files on the terminal, 
and it can be used in combination with other command-line tools to perform more complex operations.




nano Command

- > It is used to Edit a file.
    Example : 
    nano new-file.txt

nano is a command-line text editor that is commonly used in Unix-based operating systems like Linux and macOS. 
It is a simple and lightweight editor that is easy to use and has a user-friendly interface.

To open a file in nano, you can use the following command:
    nano filename.txt

This will open the file filename.txt in nano for editing. 
Once the file is open, you can use the various keyboard commands to make changes to the file. 

Some of the commonly used commands in nano include:

    Ctrl + O: Write changes to the file and save it.
    Ctrl + X: Quit nano.
    Ctrl + G: Display the help screen, which provides a list of all the available keyboard commands.
    Ctrl + K: Cut the selected text to the clipboard.
    Ctrl + U: Paste the text from the clipboard.
    
    You can also use the arrow keys to navigate through the file and make changes. 
    Additionally, nano provides syntax highlighting for many programming languages, making it easier to edit code files.


Tab Command

- > It is the autocomplete key.



Echo Command

- > It is used to print to the terminal.
    a ) > 
    -> Write to the file.
    Example : 
    echo "hello world" > textfile.txt

    b ) > > 
    -> Append to the file.
    Example : 
        echo "Another line" >> another-file.txt 

In a Unix-based operating system like Linux or macOS, 
the echo command is used to display a message or text on the standard output (usually the terminal window). 
It takes one or more arguments as input, which can be text strings, variable names, or commands whose output will be displayed.

The basic syntax of the echo command is as follows:

    echo [options] [arguments]


Some of the commonly used options with echo include:

    -n: This option suppresses the trailing newline character that is printed by default after the output.
    -e: This option enables the interpretation of escape sequences like \n (new line), \t (tab), \b (backspace), etc. in the output.

Here are a few examples of using the echo command:

    Display a text message:
        echo "Hello, world!"


Display the value of a variable:
    name="John Doe"
    echo "My name is $name"

This will display the message "My name is John Doe" on the terminal.


Display the output of a command:

    echo "The current date is $(date)"

    This will display the message "The current date is [current date and time]" on the terminal,
    with the current date and time being displayed by the date command.






man 
- > It is used to get help on a specific command.

    Example : 
    man clear 

In a Unix-based operating system like Linux or macOS, the man command is used to display the manual pages for a particular command, 
utility, or function. The manual pages provide detailed information on the syntax, options, usage, and examples of using the command.


The basic syntax of the man command is as follows:

    man [options] command

Here, command is the name of the command or utility for which you want to view the manual page. Some of the commonly used options with man include:

    -f: This option displays the one-line description of the command from the manual page.
    -k: This option searches for the given keyword in the manual page descriptions.
    -u: This option updates the list of available manual pages.


The manual pages are divided into sections, each of which corresponds to a particular category of commands or functions. 
The most commonly used sections are:

    Section 1: User commands
    Section 2: System calls
    Section 3: C library functions
    Section 4: Special files (usually found in /dev)
    Section 5: File formats and conventions
    Section 6: Games and screensavers
    Section 7: Miscellaneous

To view the manual page for a command, simply type man followed by the command name, like this:
    man ls

This will display the manual page for the ls command, which is used to list the files and directories in a particular directory.

The man command is an essential tool for Unix-based systems, as it provides a comprehensive reference for using the various commands and utilities that are available. By familiarizing yourself with the manual pages, you can gain a deeper understanding of how the system works and how to use its features more effectively.





rm 

- > This command is used to remove the files or folders.
    
    Example : 
    rm file.txt

    - > To remove a directory we use : 
        rm -rf new-folder
    The above command removes the folder.

In a Unix-based operating system like Linux or macOS, the rm command is used to remove or delete files and directories. 

The basic syntax of the rm command is as follows:

    rm [options] file(s) or directory(s)



Here, file(s) or directory(s) are the name(s) of the file or directory that you want to remove. 

Some of the commonly used options with rm include:

    -f: This option forces the removal of the file or directory without prompting for confirmation.
    -r: This option recursively removes the specified directory and its contents.
    -i: This option prompts for confirmation before removing each file.

It is important to exercise caution when using the rm command, 
as it permanently deletes the specified files and directories, and there is no way to recover them once they have been removed. 
To avoid accidentally deleting important files or directories, 
it is recommended to use the -i option or to double-check the list of files or directories before running the command.

For example, to remove a file named example.txt, you would use the following command:

    rm example.txt


To remove a directory named mydir and its contents, you would use the following command:

    rm -r mydir

Note that the rm command can be a powerful tool for managing files and directories,
but it should be used with caution to avoid accidental deletion of important data.






