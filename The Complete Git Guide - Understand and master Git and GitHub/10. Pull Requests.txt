SECTION - 10 

PULL REQUEST 

Defintion :- 

Collaboration :- 


- > We need some tool that can be used to review the code of various developers working together on a single project.
- > Other collaboraters should have the ability to review the changes made by one another in their own branches.


WHAT IS PULL REQUEST ?

- > Pull request is a proposal of potential changes.
- >  The main idea behind git was the collaboration of multiple people on the same project.


PULL REQUEST STEP BY STEP : 

1. Fork the repository: First, navigate to the repository you want to contribute to and click on the "Fork" button in the top right corner of the page. This will create a copy of the repository in your GitHub account.

2. Clone the repository: Once you have forked the repository, clone it to your local machine using Git. You can do this by running the following command in your terminal:
    
    git clone https://github.com/your-username/repository-name.git

3. Create a new branch: Next, create a new branch to make your changes in. You can do this by running the following command:

    git checkout -b new-branch-name

4. Make your changes: Now that you have created a new branch, make the necessary changes to the code. Be sure to test your changes to make sure they work as expected.

5. Commit your changes: Once you are happy with your changes, commit them to your local branch using the following command:

    git add .
    git commit -m "A brief description of your changes"

6. Push your changes: After committing your changes, push them to your forked repository using the following command:

    git push origin new-branch-name

7. Create a pull request: Now that your changes are in your forked repository, it's time to create a pull request to merge them into the original repository. To do this, go to the original repository on GitHub and click on the "Pull requests" tab. Then click the "New pull request" button.

8. Review your changes: GitHub will show you a comparison of the changes you made in your branch compared to the original repository. Review the changes to make sure they are what you intended.

9. Submit the pull request: Once you are satisfied with your changes, submit the pull request by clicking the "Create pull request" button.

10. Discuss and Merge: After you create the pull request, you can discuss it with the maintainers and other contributors. If everything looks good, the maintainers will merge your changes into the main branch of the repository.

    That's it! Your changes have been successfully merged into the repository.



CHANGING THE AUTHOR OF THE LAST COMMIT 

- > git config user.name "Shivansh Kulshrestha"

- > git config user.email "shivansh@gmail.com"

git commit --amend --author = "Shivansh Kulshrestha <shivansh@gmail.com>"
    
    - > This will be used to modify the author of the last commit.



PUSHING BRANCH TO REMOTE


- > git push -u origin <branch-name>


OPEN PULL REQUEST 

1. switch to new branch
2. open 'new pull request'
3. click the branch
4. compare new branch to default branch 


- > Always create meningful description of the pull request that shortly describes what was implemented in the new feature.

- > Anyone can open a public repos pull requests(opened) and mark a review on them.
- > Only the owner of the repository and the people who have the write access can merge the pull requests.



CREATING AND MERGING PULL REQUEST


1. Fork the repository: If you want to contribute to a project hosted on GitHub, you need to create a fork of the repository. This creates a copy of the repository under your own account, which you can freely modify without affecting the original repository.

2. Clone the forked repository: Once you have created a fork of the repository, you need to clone it to your local machine using git. This will create a local copy of the repository that you can work on.

3. Create a new branch: Before you start making changes to the code, you should create a new branch. This allows you to work on your changes independently of the main branch, and makes it easier to keep track of your changes.

4. Make your changes: Once you have created a new branch, you can start making changes to the code. You can use any code editor or IDE to make these changes.

5. Commit your changes: After you have made your changes, you need to commit them to your local repository. This creates a snapshot of your changes, which you can revert to if necessary.

6. Push your changes: Once you have committed your changes, you need to push them to your forked repository. This makes your changes available to others who might want to review them.

7. Create a pull request: After you have pushed your changes to your forked repository, you need to create a pull request. This notifies the original repository's maintainers that you have made changes and would like them to be merged into the main branch. You can create a pull request by navigating to the original repository on GitHub, clicking on the "Pull requests" tab, and then clicking on the "New pull request" button.

8. Review and discuss changes: Once you have created a pull request, others can review your changes and provide feedback. You can also discuss any issues or concerns that arise during the review process.

9. Merge the pull request: If the maintainers of the original repository are satisfied with your changes, they can merge your pull request into the main branch. This incorporates your changes into the main codebase, making them available to all users of the repository.

10. Update your forked repository: After your pull request has been merged, you should update your forked repository to reflect the changes made in the original repository. You can do this by pulling the changes from the original repository into your local repository and then pushing them to your forked repository.


ADDING A COLLABORATOR TO GITHUB 

To add a new collaborator to a GitHub repository, you can follow these steps:

1. Navigate to the repository on GitHub and click on the "Settings" tab.

2. Click on "Collaborators" in the left-hand sidebar.

3. Type the username or email address of the person you want to add as a collaborator in the "Add collaborators" field.

4. Click the "Add collaborator" button.

5. If the collaborator is a GitHub user, they will receive an email notification with an invitation to collaborate on the repository. If the collaborator is not a GitHub user, they will receive an email invitation to sign up for GitHub and collaborate on the repository.

6. Once the collaborator accepts the invitation, they will be added as a collaborator to the repository and will have permission to push code changes to the repository.

Note: Collaborators can be added to a repository if you have administrative access to the repository. If you don't have administrative access, you can request the repository owner to add a collaborator for you.


- > By default github allows you to merge pull requests even without reviews and approvals.
- > But it is possible to require certain quantity of approvals before merging will be allowed.

- > We can set the master branch as protected branch and deny merging into the default branch without approvals.


FORK REPOSITORIES

A fork in GitHub is a copy of a repository that is created in a user's account. 
Forking a repository allows users to make changes to the code without affecting the original repository.
Forking is useful for contributing to open-source projects, experimenting with code changes, and creating personal copies of repositories.

To create a fork in GitHub, follow these steps:

1. Navigate to the repository you want to fork on GitHub.

2. Click on the "Fork" button on the top-right corner of the screen.

3. Select the account where you want to fork the repository. If you have multiple accounts, make sure you choose the correct one.

4. Wait for GitHub to create the fork. Once the process is complete, you will be redirected to your own copy of the repository.

5. You can now make changes to the code in your forked repository without affecting the original repository.

6. If you want to contribute your changes back to the original repository, you can create a pull request. To do this, make your changes in a new branch in your forked repository, then open a pull request to merge your changes into the original repository.

    By creating a fork in GitHub, you can contribute to open-source projects, experiment with code changes, and create your own personal copies of repositories.



SYNCHRONIZE FORKED REPOSITORY WITH ORIGINAL REPOSITORY 

To synchronize changes from a forked repository with the original repository, you will need to follow these steps:

1. First, ensure that you have a local copy of both the forked repository and the original repository.

2. Open your terminal and navigate to your local copy of the forked repository.

3. Add the original repository as a remote by typing the following command:

    git remote add upstream <original_repository_url>

4. Fetch the latest changes from the original repository by typing:

    git fetch upstream

5. Switch to the master branch of your forked repository by typing:

    git checkout master

6. Merge the changes from the original repository into your forked repository by typing:

    git merge upstream/master

7. If there are any merge conflicts, resolve them by editing the affected files.

8. Finally, push the changes to your forked repository by typing:

    git push origin master

    Your forked repository should now be synchronized with the latest changes from the original repository.



OPEN A PULL REQUEST FROM A FORKED REPOSITORY


Step-by-step guide on how to open a pull request from a forked repository:

1. Fork the original repository: Navigate to the repository you want to contribute to and click on the "Fork" button in the upper right-hand corner of the page. This creates a copy of the repository in your own GitHub account.

2. Clone the forked repository: Clone the forked repository to your local machine using the following command in your terminal or Git Bash:

    git clone https://github.com/your-username/forked-repository.git

    Replace your-username with your GitHub username and forked-repository with the name of the repository you just forked.

3. Create a new branch: Create a new branch to work on using the following command:

    git checkout -b new-branch-name
    Replace new-branch-name with a descriptive name for your branch.

4. Make your changes: Make the necessary changes to the codebase.

5. Commit your changes: Once you've made your changes, commit them to your local repository using the following command:
    git add .
    git commit -m "A descriptive commit message"
6. Push your changes: Push your changes to your forked repository on GitHub using the following command:

    git push origin new-branch-name
    Replace new-branch-name with the name of the branch you just created.

7. Open a pull request: Navigate to your forked repository on GitHub and click on the "New pull request" button. Select the branch you just created as the "head branch" and the original repository as the "base branch". Give your pull request a descriptive title and description, and click "Create pull request".

8. Wait for the review: Your pull request is now open, and the maintainers of the original repository will review your changes. They may request changes or ask for more information before merging your changes into the original repository.




REMOVING A REPOSITORY COLLABORATOR 

Here are the steps to remove a collaborator from a GitHub repository:

1. Open the repository: Navigate to the repository you want to remove the collaborator from.

2. Click on "Settings": You can find the "Settings" button at the top right-hand corner of the repository page.

3. Click on "Collaborators & Teams": This is located in the left-hand menu of the "Settings" page.

4. Locate the collaborator: Scroll down the "Collaborators & Teams" page until you find the collaborator you want to remove.

5. Click on the "Remove" button: Next to the collaborator's name, you will see a red "Remove" button. Click on this button.

6. Confirm the removal: You will see a confirmation window asking you to confirm the removal of the collaborator. Review the information and click on the "Remove" button to confirm.

7. Notify the collaborator (optional): You can optionally notify the collaborator that they have been removed by sending them a message or email to inform them of the change.