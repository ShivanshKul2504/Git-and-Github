SECTION - 3

To learn how git works under the hood we need to firstly intialize the
our first repository.
We can intialize our repository using the following command :
    git init

Note : 
Git repository will be initially empty even if directory where you intialize Git is not empty and contains files and other directories.

After entering "git init" command new hidden folder 

Use ls -la to see the hidden .git file that is created after 
initialising a git repository.

git : (master) refers to that this repository is managed by git.
'master' is the name of the default branch. 


OVERVIEW OF THE .GIT FOLDER

- > Never manually change the .GIT FOLDER

cd .git
- > To move into the .GIT FOLDER

cat config
- > To see the contents of the config file.
- > This is the config of our .git repository.

cat description 
- > To see the description of the repository.
- > Edit that file 'description' to name the repository.

cat HEAD
- > To see the contents of the HEAD file.
- > ref: refs/heads/master 



GIT OBJECT TYPES 

There are severaral types of objects git can store.
These are : 
1. Blob 
2. Tree 
3. Commit 
4. Annotated Tag

These are the four data types that are used by git to store the file system
and version control system.

BLOB 
- > In the form of the blob object, git stores file with any file extenstion possible.
- > It represents a single file in a file system.

TREE 
- > With the help of this the git actually stores infomation about the directories.

COMMIT 
- > With the help of this object type we are able to store different versions of our files.

Annotated Tag 
- > It is the persistent text pointer to a specific commit.


Now, For the management/creation of Blobs and Trees we use the so-called 
Low level commands like 
    git hash-object 
    git cat-file
    git mktree


To Create a git object we use  : 
    echo "Hello, Git" | git hash-object --stdin -w

- > After pressing enter, we get a strange sequence of characters.
- > There will be a new folder that will be created inside the .git folder 
- > That folders name will be the first 2 characters of the strange sequence of strings we got.
- > Inside that folder a file named with the rest of the characters will be made.

This all means that git has added the object into its file structure.

Folder name + File name = Hashed strange string.



JSON VS GIT DATABASE

- > JSON stands for javascript object notation.
- > This format of data is used for data exchange between different servers. 

For Example : 
    You can retrieve some data via some API(application programming interface)
    or from the server to web browser, 
    or you can send data from database in JSON foramt to a normal server and so on.

Note : 
    According to specification, keys in JSON "should" be unique 
    and it is technically possible to create same keys, but no recommended.

Git also stores data in a key value pair format .
Key in git is the hash of the object.
Key in git is generated based on the value.



WHAT IS HASH FUNCTION ? 

- > In the git database, we store files based on their hash.
- > We create hash based on their contents and after that we create correspoding file in objects.


- > Hash function is a function that takes any variable length input and 
    creates a fixed length hash, independent of the input.
    This hash length will be always fixed.


- > If we know hash but we don't know the input to the hash,
    we will not be able to create the input based on the hash.
    Such functions are called one-way functions.

Example : 
    For higher security and confidentiality user passwords are usually stored in databases as hashes.
    When user logs in and enters the password, server creates hash of entered passsword and compares it to the hash stored in the database.
    
- > Hash functions will generate same hash from the same input.



HASH FUNCTIONS OVERVIEW

- > Some of the hash functions are as follows: 

    MD5       - 128bit
    SHA1      - 160bit
    SHA256    - 256bit
    SHA384    - 384bit
    SHA512    - 512bit

- > MD5 creates a hash that is 128 bit long (smallest in the bunch)

- > Hexadecimal format is used for more concised format of hash.



SHA1 HASH FUNCTION 

- > It creates hash that is 160 bits long.

Example : 
    'Hello, Git' 
    'Hello, Git!' will have two different hashes.

- > Even small change in the input data will lead to creation of completely different hash.

Note: 
echo -n "hello, Git"
- > The above command will print "Hello, Git%".
- > This means that their is no line break at the end.


echo "Hello, Git" | shasum
- > This will generate SHA1 hash of the input data.

echo -n "Hello, Git" | shasum
- > The hash output for this will be different from the hash output for the above case as hash generates different inputs.


HOW MANY FILES GIT CAN STORE IN THE SAME REPOSITORY ?

WHAT IS THE CHANCE OF PRODUCING SAME HASH FOR DIFFERENT FILES ? 

- > The SHA1 hash combinations will be 2^160.



GIT HASH COLLISION PROBABILITY

- > Probability of each SHA1 hash
    1/2^160 = 6.84-49

SHA1 same hash probability = 1/2^320
- > The proabability is almost equal to None.


Git cat-file 

git cat-file -p <hash> Contents of the object (Hello, Git)

git cat-file -s <hash> Size of the object (11)

git cat-file -t <hash> Type of the object (blob)




git hash-object <filename> -w

- > echo "Second file in Git Repository" > new-file.txt

- > cat new-file.txt

- > git hash-object ../new-file.txt (to go to the parent directory)



Git Blobs don't store filenames 

- > Size and type of each object are stored in git inside each object.

//////////////////////////////////////////////
TODO
//////////////////////////////////////////////



- > Every object in git is stored along with its type ,Length and Delimeter.
- > Filenames for the blobs are stored in the trees.




GIT OBJECT permissions

- > Git tree objects are stored as : permissions , type, sha1 hash, name of the file or directory.

Permissions : 
    040000 - > Directory
    100644 - > Regular non_executable file
    100664 - > Regular non-executable group-writeable File
    100755 - > Regular executalbe file
    120000 - > Symbolic link
    160000 - > Gitlink


//////////////////////////////////////////
TO DO AFTER THIS 
//////////////////////////////////////////



































































































